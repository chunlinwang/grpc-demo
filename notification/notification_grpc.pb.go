// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: notification/notification.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationClient interface {
	// UnaryNotify is unary notify.
	UnaryNotify(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	// ServerStreamingNotify is server side streaming.
	ServerStreamingNotify(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (Notification_ServerStreamingNotifyClient, error)
	// ClientStreamingNotify is client side streaming.
	ClientStreamingNotify(ctx context.Context, opts ...grpc.CallOption) (Notification_ClientStreamingNotifyClient, error)
	// BidirectionalStreamingNotify is bidi streaming.
	BidirectionalStreamingNotify(ctx context.Context, opts ...grpc.CallOption) (Notification_BidirectionalStreamingNotifyClient, error)
}

type notificationClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationClient(cc grpc.ClientConnInterface) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) UnaryNotify(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.Notification/UnaryNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) ServerStreamingNotify(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (Notification_ServerStreamingNotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Notification_ServiceDesc.Streams[0], "/notification.Notification/ServerStreamingNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServerStreamingNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notification_ServerStreamingNotifyClient interface {
	Recv() (*NotificationResponse, error)
	grpc.ClientStream
}

type notificationServerStreamingNotifyClient struct {
	grpc.ClientStream
}

func (x *notificationServerStreamingNotifyClient) Recv() (*NotificationResponse, error) {
	m := new(NotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationClient) ClientStreamingNotify(ctx context.Context, opts ...grpc.CallOption) (Notification_ClientStreamingNotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Notification_ServiceDesc.Streams[1], "/notification.Notification/ClientStreamingNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationClientStreamingNotifyClient{stream}
	return x, nil
}

type Notification_ClientStreamingNotifyClient interface {
	Send(*NotificationRequest) error
	CloseAndRecv() (*NotificationResponse, error)
	grpc.ClientStream
}

type notificationClientStreamingNotifyClient struct {
	grpc.ClientStream
}

func (x *notificationClientStreamingNotifyClient) Send(m *NotificationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notificationClientStreamingNotifyClient) CloseAndRecv() (*NotificationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationClient) BidirectionalStreamingNotify(ctx context.Context, opts ...grpc.CallOption) (Notification_BidirectionalStreamingNotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Notification_ServiceDesc.Streams[2], "/notification.Notification/BidirectionalStreamingNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationBidirectionalStreamingNotifyClient{stream}
	return x, nil
}

type Notification_BidirectionalStreamingNotifyClient interface {
	Send(*NotificationRequest) error
	Recv() (*NotificationResponse, error)
	grpc.ClientStream
}

type notificationBidirectionalStreamingNotifyClient struct {
	grpc.ClientStream
}

func (x *notificationBidirectionalStreamingNotifyClient) Send(m *NotificationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notificationBidirectionalStreamingNotifyClient) Recv() (*NotificationResponse, error) {
	m := new(NotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationServer is the server API for Notification service.
// All implementations must embed UnimplementedNotificationServer
// for forward compatibility
type NotificationServer interface {
	// UnaryNotify is unary notify.
	UnaryNotify(context.Context, *NotificationRequest) (*NotificationResponse, error)
	// ServerStreamingNotify is server side streaming.
	ServerStreamingNotify(*NotificationRequest, Notification_ServerStreamingNotifyServer) error
	// ClientStreamingNotify is client side streaming.
	ClientStreamingNotify(Notification_ClientStreamingNotifyServer) error
	// BidirectionalStreamingNotify is bidi streaming.
	BidirectionalStreamingNotify(Notification_BidirectionalStreamingNotifyServer) error
	mustEmbedUnimplementedNotificationServer()
}

// UnimplementedNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServer struct {
}

func (UnimplementedNotificationServer) UnaryNotify(context.Context, *NotificationRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryNotify not implemented")
}
func (UnimplementedNotificationServer) ServerStreamingNotify(*NotificationRequest, Notification_ServerStreamingNotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingNotify not implemented")
}
func (UnimplementedNotificationServer) ClientStreamingNotify(Notification_ClientStreamingNotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingNotify not implemented")
}
func (UnimplementedNotificationServer) BidirectionalStreamingNotify(Notification_BidirectionalStreamingNotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingNotify not implemented")
}
func (UnimplementedNotificationServer) mustEmbedUnimplementedNotificationServer() {}

// UnsafeNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServer will
// result in compilation errors.
type UnsafeNotificationServer interface {
	mustEmbedUnimplementedNotificationServer()
}

func RegisterNotificationServer(s grpc.ServiceRegistrar, srv NotificationServer) {
	s.RegisterService(&Notification_ServiceDesc, srv)
}

func _Notification_UnaryNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).UnaryNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notification/UnaryNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).UnaryNotify(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_ServerStreamingNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServer).ServerStreamingNotify(m, &notificationServerStreamingNotifyServer{stream})
}

type Notification_ServerStreamingNotifyServer interface {
	Send(*NotificationResponse) error
	grpc.ServerStream
}

type notificationServerStreamingNotifyServer struct {
	grpc.ServerStream
}

func (x *notificationServerStreamingNotifyServer) Send(m *NotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Notification_ClientStreamingNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotificationServer).ClientStreamingNotify(&notificationClientStreamingNotifyServer{stream})
}

type Notification_ClientStreamingNotifyServer interface {
	SendAndClose(*NotificationResponse) error
	Recv() (*NotificationRequest, error)
	grpc.ServerStream
}

type notificationClientStreamingNotifyServer struct {
	grpc.ServerStream
}

func (x *notificationClientStreamingNotifyServer) SendAndClose(m *NotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notificationClientStreamingNotifyServer) Recv() (*NotificationRequest, error) {
	m := new(NotificationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Notification_BidirectionalStreamingNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotificationServer).BidirectionalStreamingNotify(&notificationBidirectionalStreamingNotifyServer{stream})
}

type Notification_BidirectionalStreamingNotifyServer interface {
	Send(*NotificationResponse) error
	Recv() (*NotificationRequest, error)
	grpc.ServerStream
}

type notificationBidirectionalStreamingNotifyServer struct {
	grpc.ServerStream
}

func (x *notificationBidirectionalStreamingNotifyServer) Send(m *NotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notificationBidirectionalStreamingNotifyServer) Recv() (*NotificationRequest, error) {
	m := new(NotificationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Notification_ServiceDesc is the grpc.ServiceDesc for Notification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryNotify",
			Handler:    _Notification_UnaryNotify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingNotify",
			Handler:       _Notification_ServerStreamingNotify_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingNotify",
			Handler:       _Notification_ClientStreamingNotify_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingNotify",
			Handler:       _Notification_BidirectionalStreamingNotify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notification/notification.proto",
}
